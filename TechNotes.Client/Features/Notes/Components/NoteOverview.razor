@page "/note-overview"
@using TechNotes.Application.Notes
@rendermode @(new InteractiveWebAssemblyRenderMode(false))
@inject NavigationManager NavigationManager
@inject INotesOverviewService NotesOverviewServiceClient

<PageTitle>Mis notas</PageTitle>

<h2 class="text-5xl font-bold text-center mb-3">Mis notas</h2>
@if (notes == null)
{
    <p><em>Cargando notas...</em></p>
}
else if (notes.Count == 0)
{
    <p><em>No se encontraron notas.</em></p>
}
else
{
    <div class="max-w-4xl mx-auto px-4">
        <div class="border border-gray-200 rounded-lg shadow-sm">
            <QuickGrid Items="notes.AsQueryable()" AutoGenerateColumns="false" Class="w-full table-fixed">
                <PropertyColumn Property="@(a => a.Title)" title="Título" Sortable="true" Class="border-2 p-2" />
                <TemplateColumn Title="Contenido" Class="border-2 p-2">
                    <div class="block max-w-xs truncate text-gray-700" title="@context.Content">
                        @context.Content
                    </div>
                </TemplateColumn>
                <PropertyColumn Property="@(a => a.PublishedAt.ToShortDateString())" Title="Publicación"
                    Sortable="true" Class="border-2 p-2" />
                <TemplateColumn Title="Publicado" Class="border-2 p-2">
                    <div class="flex justify-center">
                        <span>@(context.IsPublished ? "✅" : "❌")</span>
                    </div>
                </TemplateColumn>
                <TemplateColumn Title="Acciones" Class="border-2 px-6 py-4 text-center">
    <div class="flex items-center justify-center space-x-2">
        <button @onclick="() => EditNote(context.Id)"
            class="p-2 text-indigo-600 hover:text-indigo-900 rounded-full hover:bg-indigo-50">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 16 16">
                <path
                    d="M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708l-3-3zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207l6.5-6.5zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.499.499 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11l.178-.178z" />
            </svg>
        </button>
        <button @onclick="() => TogglePublishNote(context.Id)"
            class="px-3 py-1 text-xs font-medium rounded-full @(context.IsPublished ? "bg-red-100 text-red-800 hover:bg-red-200" : "bg-green-100 text-green-800 hover:bg-green-200")">
            @(context.IsPublished ? "No publicar" : "Publicar")
        </button>
    </div>
</TemplateColumn>
            </QuickGrid>
        </div>
    </div>
}

@code {
    private List<NoteResponse>? notes;
    protected override async Task OnInitializedAsync()
    {
        var result = await NotesOverviewServiceClient.GetNoteByCurrentUserAsync();

        if (result != null)
        {
            notes = result;
        }
        else
        {
            notes = new List<NoteResponse>();
        }
    }
    private void EditNote(int id)
    {
        NavigationManager.NavigateTo($"/note-editor/{id}");
    }
    private async Task TogglePublishNote(int noteId)
    {
        var updatedNote = await NotesOverviewServiceClient.TogglePublishNoteAsync(noteId);
        if(updatedNote is not null && notes is not null)
        {
            var index = notes.FindIndex(note => note.Id == noteId);
            if(index != -1)
            {
                notes[index] = (NoteResponse)updatedNote;
                StateHasChanged();
            }
            else
            {
                Console.Error.WriteLine("Error al actulizar el estado de la nota");
            }
        }
    }
}