@page "/note-editor"
@page "/note-editor/{NoteId:int}"

@attribute [Authorize]
@inject ISender Sender
@inject NavigationManager NavigationManager;
@inject UserManager<User> UserManager;

<div class="mx-auto max-w-screen-xl px-4 py-16 sm:px-6 lg:px-8">
    <div class="mx-auto max-w-lg">
        @if (isEditMode && Note is not null)
        {
            <PageTitle>Editar nota</PageTitle>
            <div class="mb-8">
                <h1 class="text-center text-2xl font-bold text-indigo-600 sm:text-3xl">Editar Nota</h1>
                <p class="mx-auto mt-4 max-w-md text-center text-gray-500">
                    Editando: @Note.Title
                </p>
            </div>
            <div class="mb-6">
                <a href="/notes"
                    class="inline-flex items-center gap-2 rounded border border-indigo-600 bg-indigo-600 px-8 py-3 text-white focus:outline-none focus:ring active:text-indigo-500 transition-colors">
                    <svg class="size-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                    </svg>
                    Volver a notas
                </a>
            </div>
        }
        else
        {
            <PageTitle>Crear nota</PageTitle>
            <div class="mb-8">
                <h1 class="text-center text-2xl font-bold text-indigo-600 sm:text-3xl">Crear Nueva Nota</h1>
                <p class="mx-auto mt-4 max-w-md text-center text-gray-500">
                    Comparte tus ideas y conocimientos
                </p>
            </div>
        }

        @if (Note is not null)
        {
            <EditForm Model="Note" OnSubmit="HandleSubmit" FormName="NoteEditorForm"
                class="mb-0 space-y-4 rounded-lg p-4 shadow-lg sm:p-6 lg:p-8 bg-white">
                <div>
                    <label for="title" class="sr-only">Título</label>
                    <div class="relative">
                        <InputText @bind-Value="Note.Title" placeholder="Título de la nota" id="title"
                            class="w-full rounded-lg border-gray-200 p-4 pe-12 text-sm shadow-sm focus:border-indigo-500 focus:ring-indigo-500" />
                        <span class="absolute inset-y-0 end-0 grid place-content-center px-4">
                            <svg class="size-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z">
                                </path>
                            </svg>
                        </span>
                    </div>
                </div>

                <div>
                    <label for="content" class="sr-only">Contenido</label>
                    <InputTextArea @bind-Value="Note.Content" placeholder="Escribe el contenido de tu nota aquí..."
                        id="content" rows="6"
                        class="w-full rounded-lg border-gray-200 p-4 text-sm shadow-sm focus:border-indigo-500 focus:ring-indigo-500 resize-none" />
                </div>

                <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
                    <div>
                        <label for="publishDate" class="block text-sm font-medium text-gray-700 mb-2">Fecha de
                            publicación</label>
                        <InputDate @bind-Value="Note.PublishedAt" id="publishDate"
                            class="w-full rounded-lg border-gray-200 p-3 text-sm shadow-sm focus:border-indigo-500 focus:ring-indigo-500" />
                    </div>

                    <div class="flex items-center justify-center">
                        <label
                            class="flex cursor-pointer items-start gap-4 rounded-lg border border-gray-200 p-4 transition hover:bg-gray-50">
                            <div class="flex items-center">
                                <InputCheckbox @bind-Value="Note.IsPublished"
                                    class="size-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500" />
                            </div>
                            <div>
                                <strong class="font-medium text-gray-900">Publicar nota</strong>
                                <p class="mt-1 text-xs text-gray-700">La nota será visible públicamente</p>
                            </div>
                        </label>
                    </div>
                </div>

                <button type="submit"
                    class="block w-full rounded-lg bg-indigo-600 px-5 py-3 text-sm font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring focus:ring-indigo-300 active:bg-indigo-800 transition-colors">
                    @(isEditMode ? "Actualizar Nota" : "Crear Nota")
                </button>
            </EditForm>

            @if (isEditMode)
            {
                <form @onsubmit="DeleteNote" @formname="DeleteNoteForm" method="POST" class="mt-4">
                    <button type="submit"
                        class="block w-full rounded-lg bg-red-600 px-5 py-3 text-sm font-medium text-white hover:bg-red-700 focus:outline-none focus:ring focus:ring-red-300 active:bg-red-800 transition-colors">
                        <svg class="inline-block size-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16">
                            </path>
                        </svg>
                        Eliminar Nota
                    </button>
                    <AntiforgeryToken />
                </form>
            }
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="mt-4 rounded-lg bg-red-50 p-4 border border-red-200">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <svg class="size-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.08 16.5c-.77.833.192 2.5 1.732 2.5z">
                            </path>
                        </svg>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm text-red-700">@errorMessage</p>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private bool isEditMode => NoteId != null;
    private string errorMessage = string.Empty;

    [SupplyParameterFromForm]
    private NoteModel? Note { get; set; }
    [Parameter]
    public int? NoteId { get; set; }
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;
    protected override async Task OnParametersSetAsync()
    {
        if (NoteId is not null)
        {
            var result = await Sender.Send(new GetNoteByIdQuery { Id = (int)NoteId });
            if (result.IsSuccessful)
            {
                Note ??= result.Value.Adapt<NoteModel>();
                Note.Id = (int)NoteId;
            }
            else
            {
                SetErrorMessage(result.ErrorMessage);
            }
        }
        else
        {
            Note ??= new();
        }
    }
    private async Task HandleSubmit()
    {
        if (isEditMode)
        {
            var command = Note.Adapt<UpdateNoteCommand>();
            var result = await Sender.Send(command);
            if (result.IsSuccessful)
            {
                Note = result.Value.Adapt<NoteModel>();
                Console.WriteLine("Nota actualizada satistactoriamente");
                NavigationManager.NavigateTo("/notes");
            }
            else
            {
                SetErrorMessage(result.ErrorMessage);
            }
        }
        else
        {
            var command = Note.Adapt<CreateNoteCommand>();
            command.UserId = UserManager.GetUserId(HttpContext.User);
            var result = await Sender.Send(command);
            if (result.IsSuccessful)
            {
                Note = result.Adapt<NoteModel>();
                Console.WriteLine("Nota creada satistactoriamente");
                NavigationManager.NavigateTo("/notes");
            }
            else
            {
                SetErrorMessage(result.ErrorMessage);
            }
        }
    }
    private async Task DeleteNote()
    {
        if (NoteId is null)
        {
            return;
        }
        var command = new DeleteNoteCommand { Id = (int)NoteId };
        var result = await Sender.Send(command);
        if (result.IsSuccessful)
        {
            Console.WriteLine("Nota eliminada satisfactoriamente");
            NavigationManager.NavigateTo("/notes");
        }
        else
        {
            Console.WriteLine("Sucedio un error al eliminar la nota");
        }
    }
    private void SetErrorMessage(string? error)
    {
        errorMessage = error ?? string.Empty;
    }
}