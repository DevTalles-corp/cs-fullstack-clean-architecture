@page "/notes"
@attribute [StreamRendering]
@* @inject INoteService NoteService; *@
@inject ISender Sender;


<PageTitle>Notas</PageTitle>
<h3>Notas</h3>
<a href="/note-editor" class="btn btn-primary">Crear nota</a>
@if (notes == null)
{
    <p>Cargando las notas...</p>
}
else if (notes.Count == 0)
{
    <p>No hay notas disponibles.</p>
}
else
{
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-6">
            @foreach (var note in notes)
            {
                <article class="overflow-hidden rounded-lg shadow-sm transition hover:shadow-lg">
                    <div class="bg-white p-4 sm:p-6">
                        <time datetime="2022-10-10" class="block text-xs text-gray-500"> @note.CreatedAt </time>
                        <a href="/note-editor/@note.Id">
                            <h3 class="mt-0.5 text-lg text-gray-900">@note.Title</h3>
                        </a>
                        <p class="mt-2 line-clamp-3 text-sm/relaxed text-gray-500">
                            @note.Content
                        </p>
                    </div>
                </article>

            }
        </div>
    </div>
}

@code {
    private List<NoteResponse>? notes = new List<NoteResponse>();
    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000);
        var result = await Sender.Send(new GetNotesQuery());
        if (result is not null)
        {
            notes = result.IsSuccessful ? result : new List<NoteResponse>();
        }
    }
}