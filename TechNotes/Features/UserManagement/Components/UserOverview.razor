@page "/user-overview"
@using Microsoft.AspNetCore.Components.QuickGrid
@using TechNotes.Application.Users
@using TechNotes.Application.Users.GetUsers
@inject ISender Sender;
@rendermode @(new InteractiveServerRenderMode())
@attribute [Authorize(Roles = "Admin")]
<PageTitle>Usuarios</PageTitle>

<h1 class="text-3xl font-bold text-blue-900 tracking-tight">Usuarios</h1>
@if (users is null)
{
    <p class="text-center">Cargando usuarios..</p>
}
else if (users.Count == 0)
{
    <p class="text-center">No hay usuarios para mostrar</p>
}
else
{
    <div class="border-2 border-gray-300 rounded-lg shadow-md">
        <QuickGrid Items="users.AsQueryable()" class="w-full table-auto bg-white">
            <PropertyColumn Property="@(u => u.UserName)" Sortable="true" class="border-2" Title="Nombre de usuario" />
            <PropertyColumn Property="@(u => u.Email)" Sortable="true" class="border-2" Title="Correo electrónico" />
            <PropertyColumn Property="@(u => u.Roles)" class="border-2" Title="Roles" />
            <TemplateColumn Title="Administrar" Class="border-2 px-4 py-3 text-center">
                <div class="flex justify-center">
                    <button
                        class="rounded-md inline-flex items-center gap-2 px-4 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-all duration-200 shadow-sm hover:shadow-md"
                        @onclick="() => OpenModal(context.Id, context.UserName)">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z">
                            </path>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                        </svg>
                        Roles
                    </button>
                </div>
            </TemplateColumn>
        </QuickGrid>
    </div>
}
<UserRolesModal ShowModal="@showModal" ModalClosed="CloseModal" UserId="@selectedUserId" UserName="@selectedUserName" />

@code {
    private List<UserResponse> users = new();
    private bool showModal = false;
    private string selectedUserId = string.Empty;
    private string selectedUserName = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }
    private void OpenModal(string userId, string userName)
    {
        selectedUserId = userId;
        selectedUserName = userName;
        showModal = true;
        Console.WriteLine($"Modal abierto con el usuario {userName} ({userId})");
    }

    private async void CloseModal()
    {
        selectedUserId = string.Empty;
        selectedUserName = string.Empty;
        showModal = false;
        Console.WriteLine("Modal cerrado");
        await LoadUsers();
        StateHasChanged();
    }

    private async Task LoadUsers()
    {
        var result = await Sender.Send(new GetUsersQuery());
        if (result.IsSuccessful && result.Value is not null)
        {
            users = result.Value;
        }
        else
        {
            users = new List<UserResponse>();
        }
    }

}